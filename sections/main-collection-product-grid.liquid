{% comment %}
  Main collection page displaying products in a responsive grid with filtering and sorting.
  Supports Klaviyo personalization, in-grid content items, and faceted search.

  Features:
  - Responsive product grid layout
  - Faceted filtering (price, color, size, etc.)
  - Sorting options (price, date, popularity)
  - Pagination for large collections
  - In-grid content items for merchandising
  - Klaviyo personalization integration
  - Real-time filter updates without page refresh
  - Accessibility-compliant filtering

  Klaviyo Integration:
  - Personalized product recommendations
  - UTM parameter tracking
  - Segment-based content display
  - Cart attribute integration

  Layout:
  - Filters: Sidebar or top filters (responsive)
  - Grid: Configurable column count (mobile/desktop)
  - Pagination: Bottom pagination controls
  - In-grid items: Positioned content between products

  Dependencies:
  - component-facets.js for filter functionality
  - Various product card snippets
  - Klaviyo API integration (optional)
  - Collection liquid objects

  Schema settings control:
  - Grid layout and spacing
  - Filter display options
  - Klaviyo personalization toggles
  - In-grid content positioning
{% endcomment %}

{% comment %} NOTE Be sure to delete the Klaviyo logic if you are not using it! {% endcomment %}

{%- render '@needs-script', entries: 'component-facets.js' -%}
{% liquid
  assign filter_params = ''
  assign active_filters_size = 0
  assign show_ingrid_items = section.settings.show_ingrid_items
  if section.settings.klaviyo_pesonalization_enable_group
    assign cart_attributes = cart.attributes
    assign utm_pers = cart_attributes[settings.klaviyo_utm_personalisation]
    assign allowed_groups = ''
    if cart_attributes.size > 0
      if utm_pers != blank
        assign allowed_groups = utm_pers
        assign end_index = cart_attributes.size | minus: 2
        for i in (0..end_index)
          assign group_key = 'segment_' | append: i
          if cart_attributes[group_key] != blank
            assign allowed_groups = allowed_groups | append: ',' | append: cart_attributes[group_key]
          endif
        endfor
      else
        assign end_index = cart_attributes.size | minus: 1
        for i in (0..end_index)
          assign group_key = 'segment_' | append: i
          if cart_attributes[group_key] != blank
            if forloop.first
              assign allowed_groups = allowed_groups | append: cart_attributes[group_key]
            else
              assign allowed_groups = allowed_groups | append: ',' | append: cart_attributes[group_key]
            endif
          endif
        endfor
      endif
    endif
  endif

  for filter in collection.filters
    if filter.active_values.size > 0
      assign show_ingrid_items = false
      assign active_filters_size = active_filters_size | plus: filter.active_values.size

      if filter_params != ''
        assign filter_params = filter_params | append: '&'
      endif

      for value in filter.active_values
        assign filter_params = filter_params | append: filter.param_name | append: '=' | append: value.value

        unless forloop.last
          assign filter_params = filter_params | append: '&'
        endunless
      endfor
    endif
  endfor

  if show_ingrid_items
    assign colleciton_ingrids = collection.metafields.custom.in_grid_content.value

    if colleciton_ingrids == blank
      assign show_ingrid_items = false
    else
      assign collection_ingrids_mobile_positions = colleciton_ingrids | map: 'grid_position_small_screen' | uniq
      assign collection_ingrids_positions = colleciton_ingrids | map: 'grid_position' | uniq

      assign count_desktop = 0
      assign adjusted_index_desktop = 0
      assign occupied_positions_desktop = ''

      assign count_mobile = 0
      assign adjusted_index_mobile = 0
      assign occupied_positions_mobile = ''
    endif
  endif

  capture color_scheme
    render '@color-scheme', color_scheme: section.settings.color_scheme
  endcapture
%}

<div id='collection' data-section-id='{{- section.id -}}'>
  <div section-id='{{- section.id -}}' class='{{ color_scheme }}'>
    {%- paginate collection.products by section.settings.products_per_page -%}
      <div class='container pb-6'>
        {% content_for 'block',
          type: 'filters',
          id: 'filters',
          active_filters_size: active_filters_size,
          color_scheme: color_scheme
        %}

        <div sub-section-id='product-grid-container' id='product-grid-container'>
          {%- if collection.products.size == 0 -%}
            <div id='product-grid' data-id='{{ section.id }}'>
              <div class='flex items-center'>
                <h2>
                  {{ 'sections.collection_template.empty' | t -}}
                  <br>
                  {{
                    'sections.collection_template.use_fewer_filters_html'
                    | t: link: collection.url, class: 'underlined-link link'
                  }}
                </h2>
              </div>
            </div>
          {%- else -%}
            <div>
              <ul
                id='product-grid'
                data-id='{{ section.id }}'
                class='grid grid-cols-2 gap-y-2.5 gap-x-2.5 lg:grid-cols-4 lg:gap-y-5 mb-lg'
              >
                {%- for product in collection.products -%}
                  {%- liquid
                    assign lazy_load = false
                    assign index_with_offset = forloop.index | plus: paginate.current_offset
                    if forloop.index > 4
                      assign lazy_load = true
                    endif

                    assign adjusted_index_mobile = index_with_offset | plus: count_mobile

                    if collection_ingrids_mobile_positions contains adjusted_index_mobile
                      unless occupied_positions_mobile contains adjusted_index_mobile
                        assign in_grid_for_position = colleciton_ingrids | where: 'grid_position_small_screen', adjusted_index_mobile | first
                        if section.settings.klaviyo_pesonalization_enable_group
                          render 'personalization-collection-ingrid-item', item: in_grid_for_position, is_mobile: true, index: index_with_offset, allowed_groups: allowed_groups
                        else
                          content_for 'block', id: 'collection-ingrid-item', type: '_collection-ingrid-item', item: in_grid_for_position, is_mobile: true, index: index_with_offset
                        endif

                        assign count_mobile = count_mobile | plus: 1
                        assign occupied_positions_mobile = adjusted_index_mobile | append: ',' | append: occupied_positions_mobile
                      endunless
                    endif

                    assign adjusted_index_desktop = index_with_offset | plus: count_desktop

                    if collection_ingrids_positions contains adjusted_index_desktop
                      unless occupied_positions_desktop contains adjusted_index_desktop
                        assign in_grid_for_position = colleciton_ingrids | where: 'grid_position', adjusted_index_desktop | first

                        if section.settings.klaviyo_pesonalization_enable_group
                          render 'personalization-collection-ingrid-item', item: in_grid_for_position, is_mobile: false, index: index_with_offset, allowed_groups: allowed_groups
                        else
                          content_for 'block', id: 'collection-ingrid-item-desktop', type: '_collection-ingrid-item', item: in_grid_for_position, is_mobile: false, index: index_with_offset
                        endif

                        assign count_desktop = count_desktop | plus: 1
                        assign occupied_positions_desktop = adjusted_index_desktop | append: ',' | append: occupied_positions_desktop
                      endunless
                    endif
                  -%}

                  <li class='w-full flex'>
                    {% content_for 'block',
                      type: 'product-card',
                      id: 'product-card',
                      closest.product: product,
                      lazy_load: lazy_load
                    %}
                  </li>
                {%- endfor -%}
              </ul>

              {%- content_for 'block', type: 'pagination', id: 'pagination', results: paginate -%}
            </div>
          {%- endif -%}
        </div>
      </div>
    {%- endpaginate -%}
  </div>
</div>

{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "klaviyo_pesonalization_enable_group",
      "label": "t:sections.klaviyo-personalization_main-collection-product-grid.settings.klaviyo_pesonalization_enable_group.label",
      "info": "t:sections.klaviyo-personalization_main-collection-product-grid.settings.klaviyo_pesonalization_enable_group.info",
      "default": false
    },
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 36,
      "step": 4,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
    {
      "type": "checkbox",
      "id": "show_ingrid_items",
      "label": "t:sections.main-collection-product-grid.settings.show_ingrid_items.label",
      "default": true
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    }
  ]
}
{% endschema %}
