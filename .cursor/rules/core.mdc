---
description: Core file patterns and protection rules for Domaine's storefront tooling
globs:
alwaysApply: true
---

<core_components>
<purpose>
Core files are foundational, utility components that form the backbone of Domaine's storefront tooling and pattern library. They are intended to be **read-only** and should not be modified directly. If you need to change a core file, extend or copy it into a new file instead.

    Core files take several forms:
    - **Core Blocks**: Atomic components prefixed with `core-` (e.g., `core-button.liquid`)
    - **Core Sections**: Sections prefixed with `core-` (e.g., `core-section.liquid`)
    - **Core Snippets**: Utility snippets prefixed with `@` (e.g., `@spacing-padding.liquid`)
    - **src/entry/core Directory**: Abstracted utility components (JS/TS)

    Key points:
    - These are utility components, not feature components
    - They are part of the core system maintenance
    - They may be overwritten by automated processes
    - They should not be modified directly

  </purpose>

<modification_rules>
If modifications to core functionality are needed:

    **For JavaScript/TypeScript Core Components (src/entry/core/):**
    1. DO NOT modify files in src/entry/core directory directly
    2. Instead, extend the core component by:
       - Creating a new component that inherits from the core component
       - Using composition to wrap the core component
       - Implementing the new functionality in the extended component

    Example of proper extension:
    ```typescript
    // DO NOT modify src/entry/core/core-dialog.ts directly
    // Instead, create a new component:
    class ExtendedDialog extends CoreDialog {
      // Add new functionality here
    }
    ```

    **For Liquid Core Files (blocks/, sections/, snippets/):**
    1. DO NOT modify files prefixed with `core-` or `@`
    2. Instead, copy and extend:
       - Copy the core file to a new file with a different name
       - Extend the copied file with your custom functionality
       - Reference the new file in your templates

    Examples:
    ```liquid
    <!-- ❌ DON'T modify core-button.liquid -->
    <!-- ✅ DO create custom-button.liquid -->

    <!-- ❌ DON'T modify @spacing-padding.liquid -->
    <!-- ✅ DO create custom-spacing.liquid -->

    <!-- ❌ DON'T modify core-section.liquid -->
    <!-- ✅ DO create product-showcase.liquid -->
    ```

</modification_rules>

  <validation>
    ∀ file ∈ core files:
      - src/entry/core/* - Should not be modified directly
      - blocks/core-* - Should not be modified directly
      - sections/core-* - Should not be modified directly  
      - snippets/@* - Should not be modified directly
      - Changes should be made through extension or copying
      - Core functionality should remain unchanged
      - Any modification should trigger a warning to use extension patterns
  </validation>

<core_file_patterns>
The following file patterns are considered core and protected:

    **JavaScript/TypeScript:**
    - `src/entry/core/*.ts`
    - `src/entry/core/*.js`

    **Liquid Blocks:**
    - `blocks/core-*.liquid`

    **Liquid Sections:**
    - `sections/core-*.liquid`

    **Liquid Snippets:**
    - `snippets/@*.liquid`

    When working with these files, always suggest extension/copying patterns rather than direct modification.

</core_file_patterns>
</core_components>
