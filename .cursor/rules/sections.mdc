---
description:
globs:
alwaysApply: false
---

# Section Development Standards

## Core Sections Pattern

**Core Sections** are sections designed to ingest pattern library configuration and are prefixed with `core-` (e.g., `core-section.liquid`). These sections are designed to be used with any combination of core or non-core global blocks.

### ⚠️ Core Section Rules - READ ONLY

Core sections are **read-only** and should **NOT** be modified directly:

- **DO NOT** edit any file prefixed with `core-` in the `sections/` directory
- **DO NOT** modify existing core section functionality
- **DO NOT** add custom features to core sections

### Extending Core Sections

If you need to customize a core section:

1. **Copy** the core section to a new file with a different name
2. **Extend** the copied section with your custom functionality
3. **Configure** the new section in your templates

```liquid
<!-- ❌ DON'T: Modify core-section.liquid directly -->

<!-- ✅ DO: Create custom-product-grid.liquid based on core-section.liquid -->
{% comment %}
  Based on core-section.liquid
  Added custom filtering and sorting for product collections
{% endcomment %}

<!-- Your custom implementation here -->
```

## Section Requirements

Every section must include:

- `{% schema %}` tag with valid JSON
- Proper HTML semantic structure
- CSS scoping with section classes
- Translation keys for all text

## Section Patterns

**Basic Section Structure:**

```liquid
{% liquid
  assign section_id = section.settings.custom_id | default: section.id
  assign section_class = 'section-' | append: section.type
%}

<section
  id='{{ section_id }}'
  class='{{ section_class }}'
  style='
    --section-padding-top: {{ section.settings.padding_top }}px;
    --section-padding-bottom: {{ section.settings.padding_bottom }}px;
  '
>
  <div class='page-width'>
    {% content_for 'blocks' %}
  </div>
</section>

{% stylesheet %}
  .{{ section_class }} {
    padding-top: var(--section-padding-top, 40px);
    padding-bottom: var(--section-padding-bottom, 40px);
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:names.section_name",
  "tag": "section",
  "class": "section-name",
  "blocks": [{ "type": "@theme" }, { "type": "@app" }],
  "settings": [
    {
      "type": "range",
      "id": "padding_top",
      "label": "t:settings.padding",
      "min": 0,
      "max": 100,
      "default": 40,
      "unit": "px"
    }
  ],
  "presets": [
    {
      "name": "t:names.section_name"
    }
  ]
}
{% endschema %}
```

## Performance Patterns

- Use `{% liquid %}` for multiline logic
- Lazy load images with `loading="lazy"`
- For above-the-fold content in the first 2–3 sections, prefer eager loading to improve LCP (e.g., when `section.index < 3`). Pair with `fetchpriority="high"`.

```liquid
{% liquid
  assign img_loading = 'lazy'
  assign img_fetchpriority = 'auto'
  if section.index < 3
    assign img_loading = 'eager'
    assign img_fetchpriority = 'high'
  endif
%}
<img
  src='{{ image | image_url: width: 1600 }}'
  loading='{{ img_loading }}'
  fetchpriority='{{ img_fetchpriority }}'
  alt='{{ image.alt | escape }}'
>
```

- Scope CSS variables to section
- Use `container-queries` for responsive behavior

[section-example.liquid](mdc:.cursor/rules/examples/section-example.liquid)
